State 1 conflicts: 1 shift/reduce
State 28 conflicts: 1 shift/reduce
State 41 conflicts: 1 shift/reduce
State 43 conflicts: 1 shift/reduce
State 104 conflicts: 13 shift/reduce
State 105 conflicts: 12 shift/reduce
State 130 conflicts: 12 shift/reduce
State 131 conflicts: 12 shift/reduce
State 147 conflicts: 12 shift/reduce


Grammar

    0 $accept: program $end

    1 program: exp

    2 exp: LPAREN exp RPAREN
    3    | LPAREN expseq RPAREN
    4    | lvalue
    5    | NIL
    6    | INT
    7    | STRING
    8    | callexp
    9    | opexp
   10    | recordexp
   11    | arrayexp
   12    | assignexp
   13    | ifexp
   14    | whileexp
   15    | forexp
   16    | BREAK
   17    | letexp
   18    | LPAREN RPAREN

   19 expseq: exp SEMICOLON expseq
   20       | exp

   21 explist: exp COMMA explist
   22        | exp

   23 lvalue: ID
   24       | lvalue DOT ID
   25       | lvalue LBRACK exp RBRACK
   26       | ID LBRACK exp RBRACK

   27 callexp: ID LPAREN RPAREN
   28        | ID LPAREN explist RPAREN

   29 opexp: exp PLUS exp
   30      | exp MINUS exp
   31      | exp TIMES exp
   32      | exp DIVIDE exp
   33      | exp EQ exp
   34      | exp NEQ exp
   35      | exp LT exp
   36      | exp LE exp
   37      | exp GT exp
   38      | exp GE exp
   39      | exp AND exp
   40      | exp OR exp
   41      | MINUS exp

   42 recordexp: ID LBRACE rec RBRACE
   43          | ID LBRACE RBRACE

   44 rec: rec_one COMMA rec
   45    | rec_one

   46 rec_one: ID EQ exp

   47 arrayexp: ID LBRACK exp RBRACK OF exp

   48 assignexp: lvalue ASSIGN exp

   49 ifexp: IF exp THEN exp ELSE exp
   50      | IF exp THEN exp

   51 whileexp: WHILE exp DO exp

   52 forexp: FOR ID ASSIGN exp TO exp DO exp

   53 letexp: LET decs IN expseq END

   54 decs: dec decs
   55     | /* empty */

   56 dec: vardec
   57    | fundecs
   58    | tydecs

   59 vardec: VAR ID ASSIGN exp
   60       | VAR ID COLON ID ASSIGN exp

   61 fundecs: fundec fundecs
   62        | fundec

   63 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp
   64       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp

   65 tydecs: tydec tydecs
   66       | tydec

   67 tydec: TYPE ID EQ ty

   68 ty: ID
   69   | LBRACE tyfields RBRACE
   70   | ARRAY OF ID

   71 tyfields: /* empty */
   72         | tyfields_nonempty

   73 tyfields_nonempty: field COMMA tyfields_nonempty
   74                  | field

   75 field: ID COLON ID


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 23 24 26 27 28 42 43 46 47 52 59 60 63 64 67 68 70 75
STRING (259) 7
INT (260) 6
COMMA (261) 21 44 73
COLON (262) 60 64 75
SEMICOLON (263) 19
LPAREN (264) 2 3 18 27 28 63 64
RPAREN (265) 2 3 18 27 28 63 64
LBRACK (266) 25 26 47
RBRACK (267) 25 26 47
LBRACE (268) 42 43 69
RBRACE (269) 42 43 69
DOT (270) 24
PLUS (271) 29
MINUS (272) 30 41
TIMES (273) 31
DIVIDE (274) 32
EQ (275) 33 46 63 64 67
NEQ (276) 34
LT (277) 35
LE (278) 36
GT (279) 37
GE (280) 38
AND (281) 39
OR (282) 40
ASSIGN (283) 48 52 59 60
ARRAY (284) 70
IF (285) 49 50
THEN (286) 49 50
ELSE (287) 49
WHILE (288) 51
FOR (289) 52
TO (290) 52
DO (291) 51 52
LET (292) 53
IN (293) 53
END (294) 53
OF (295) 47 70
BREAK (296) 16
NIL (297) 5
FUNCTION (298) 63 64
VAR (299) 59 60
TYPE (300) 67
UMINUS (301)


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
program (48)
    on left: 1, on right: 0
exp (49)
    on left: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18,
    on right: 1 2 19 20 21 22 25 26 29 30 31 32 33 34 35 36 37 38 39
    40 41 46 47 48 49 50 51 52 59 60 63 64
expseq (50)
    on left: 19 20, on right: 3 19 53
explist (51)
    on left: 21 22, on right: 21 28
lvalue (52)
    on left: 23 24 25 26, on right: 4 24 25 48
callexp (53)
    on left: 27 28, on right: 8
opexp (54)
    on left: 29 30 31 32 33 34 35 36 37 38 39 40 41,
    on right: 9
recordexp (55)
    on left: 42 43, on right: 10
rec (56)
    on left: 44 45, on right: 42 44
rec_one (57)
    on left: 46, on right: 44 45
arrayexp (58)
    on left: 47, on right: 11
assignexp (59)
    on left: 48, on right: 12
ifexp (60)
    on left: 49 50, on right: 13
whileexp (61)
    on left: 51, on right: 14
forexp (62)
    on left: 52, on right: 15
letexp (63)
    on left: 53, on right: 17
decs (64)
    on left: 54 55, on right: 53 54
dec (65)
    on left: 56 57 58, on right: 54
vardec (66)
    on left: 59 60, on right: 56
fundecs (67)
    on left: 61 62, on right: 57 61
fundec (68)
    on left: 63 64, on right: 61 62
tydecs (69)
    on left: 65 66, on right: 58 65
tydec (70)
    on left: 67, on right: 65 66
ty (71)
    on left: 68 69 70, on right: 67
tyfields (72)
    on left: 71 72, on right: 63 64 69
tyfields_nonempty (73)
    on left: 73 74, on right: 72 73
field (74)
    on left: 75, on right: 73 74


state 0

    0 $accept: . program $end

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    program    go to state 12
    exp        go to state 13
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 1

   23 lvalue: ID .
   26       | ID . LBRACK exp RBRACK
   27 callexp: ID . LPAREN RPAREN
   28        | ID . LPAREN explist RPAREN
   42 recordexp: ID . LBRACE rec RBRACE
   43          | ID . LBRACE RBRACE
   47 arrayexp: ID . LBRACK exp RBRACK OF exp

    LPAREN  shift, and go to state 24
    LBRACK  shift, and go to state 25
    LBRACE  shift, and go to state 26

    LBRACK    [reduce using rule 23 (lvalue)]
    $default  reduce using rule 23 (lvalue)


state 2

    7 exp: STRING .

    $default  reduce using rule 7 (exp)


state 3

    6 exp: INT .

    $default  reduce using rule 6 (exp)


state 4

    2 exp: LPAREN . exp RPAREN
    3    | LPAREN . expseq RPAREN
   18    | LPAREN . RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    RPAREN  shift, and go to state 27
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 28
    expseq     go to state 29
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 5

   41 opexp: MINUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 30
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 6

   49 ifexp: IF . exp THEN exp ELSE exp
   50      | IF . exp THEN exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 31
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 7

   51 whileexp: WHILE . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 32
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 8

   52 forexp: FOR . ID ASSIGN exp TO exp DO exp

    ID  shift, and go to state 33


state 9

   53 letexp: LET . decs IN expseq END

    FUNCTION  shift, and go to state 34
    VAR       shift, and go to state 35
    TYPE      shift, and go to state 36

    $default  reduce using rule 55 (decs)

    decs     go to state 37
    dec      go to state 38
    vardec   go to state 39
    fundecs  go to state 40
    fundec   go to state 41
    tydecs   go to state 42
    tydec    go to state 43


state 10

   16 exp: BREAK .

    $default  reduce using rule 16 (exp)


state 11

    5 exp: NIL .

    $default  reduce using rule 5 (exp)


state 12

    0 $accept: program . $end

    $end  shift, and go to state 44


state 13

    1 program: exp .
   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48
    EQ      shift, and go to state 49
    NEQ     shift, and go to state 50
    LT      shift, and go to state 51
    LE      shift, and go to state 52
    GT      shift, and go to state 53
    GE      shift, and go to state 54
    AND     shift, and go to state 55
    OR      shift, and go to state 56

    $default  reduce using rule 1 (program)


state 14

    4 exp: lvalue .
   24 lvalue: lvalue . DOT ID
   25       | lvalue . LBRACK exp RBRACK
   48 assignexp: lvalue . ASSIGN exp

    LBRACK  shift, and go to state 57
    DOT     shift, and go to state 58
    ASSIGN  shift, and go to state 59

    $default  reduce using rule 4 (exp)


state 15

    8 exp: callexp .

    $default  reduce using rule 8 (exp)


state 16

    9 exp: opexp .

    $default  reduce using rule 9 (exp)


state 17

   10 exp: recordexp .

    $default  reduce using rule 10 (exp)


state 18

   11 exp: arrayexp .

    $default  reduce using rule 11 (exp)


state 19

   12 exp: assignexp .

    $default  reduce using rule 12 (exp)


state 20

   13 exp: ifexp .

    $default  reduce using rule 13 (exp)


state 21

   14 exp: whileexp .

    $default  reduce using rule 14 (exp)


state 22

   15 exp: forexp .

    $default  reduce using rule 15 (exp)


state 23

   17 exp: letexp .

    $default  reduce using rule 17 (exp)


state 24

   27 callexp: ID LPAREN . RPAREN
   28        | ID LPAREN . explist RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    RPAREN  shift, and go to state 60
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 61
    explist    go to state 62
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 25

   26 lvalue: ID LBRACK . exp RBRACK
   47 arrayexp: ID LBRACK . exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 63
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 26

   42 recordexp: ID LBRACE . rec RBRACE
   43          | ID LBRACE . RBRACE

    ID      shift, and go to state 64
    RBRACE  shift, and go to state 65

    rec      go to state 66
    rec_one  go to state 67


state 27

   18 exp: LPAREN RPAREN .

    $default  reduce using rule 18 (exp)


state 28

    2 exp: LPAREN exp . RPAREN
   19 expseq: exp . SEMICOLON expseq
   20       | exp .
   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp

    SEMICOLON  shift, and go to state 68
    RPAREN     shift, and go to state 69
    PLUS       shift, and go to state 45
    MINUS      shift, and go to state 46
    TIMES      shift, and go to state 47
    DIVIDE     shift, and go to state 48
    EQ         shift, and go to state 49
    NEQ        shift, and go to state 50
    LT         shift, and go to state 51
    LE         shift, and go to state 52
    GT         shift, and go to state 53
    GE         shift, and go to state 54
    AND        shift, and go to state 55
    OR         shift, and go to state 56

    RPAREN  [reduce using rule 20 (expseq)]


state 29

    3 exp: LPAREN expseq . RPAREN

    RPAREN  shift, and go to state 70


state 30

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp
   41      | MINUS exp .

    $default  reduce using rule 41 (opexp)


state 31

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp
   49 ifexp: IF exp . THEN exp ELSE exp
   50      | IF exp . THEN exp

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48
    EQ      shift, and go to state 49
    NEQ     shift, and go to state 50
    LT      shift, and go to state 51
    LE      shift, and go to state 52
    GT      shift, and go to state 53
    GE      shift, and go to state 54
    AND     shift, and go to state 55
    OR      shift, and go to state 56
    THEN    shift, and go to state 71


state 32

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp
   51 whileexp: WHILE exp . DO exp

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48
    EQ      shift, and go to state 49
    NEQ     shift, and go to state 50
    LT      shift, and go to state 51
    LE      shift, and go to state 52
    GT      shift, and go to state 53
    GE      shift, and go to state 54
    AND     shift, and go to state 55
    OR      shift, and go to state 56
    DO      shift, and go to state 72


state 33

   52 forexp: FOR ID . ASSIGN exp TO exp DO exp

    ASSIGN  shift, and go to state 73


state 34

   63 fundec: FUNCTION . ID LPAREN tyfields RPAREN EQ exp
   64       | FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 74


state 35

   59 vardec: VAR . ID ASSIGN exp
   60       | VAR . ID COLON ID ASSIGN exp

    ID  shift, and go to state 75


state 36

   67 tydec: TYPE . ID EQ ty

    ID  shift, and go to state 76


state 37

   53 letexp: LET decs . IN expseq END

    IN  shift, and go to state 77


state 38

   54 decs: dec . decs

    FUNCTION  shift, and go to state 34
    VAR       shift, and go to state 35
    TYPE      shift, and go to state 36

    $default  reduce using rule 55 (decs)

    decs     go to state 78
    dec      go to state 38
    vardec   go to state 39
    fundecs  go to state 40
    fundec   go to state 41
    tydecs   go to state 42
    tydec    go to state 43


state 39

   56 dec: vardec .

    $default  reduce using rule 56 (dec)


state 40

   57 dec: fundecs .

    $default  reduce using rule 57 (dec)


state 41

   61 fundecs: fundec . fundecs
   62        | fundec .

    FUNCTION  shift, and go to state 34

    FUNCTION  [reduce using rule 62 (fundecs)]
    $default  reduce using rule 62 (fundecs)

    fundecs  go to state 79
    fundec   go to state 41


state 42

   58 dec: tydecs .

    $default  reduce using rule 58 (dec)


state 43

   65 tydecs: tydec . tydecs
   66       | tydec .

    TYPE  shift, and go to state 36

    TYPE      [reduce using rule 66 (tydecs)]
    $default  reduce using rule 66 (tydecs)

    tydecs  go to state 80
    tydec   go to state 43


state 44

    0 $accept: program $end .

    $default  accept


state 45

   29 opexp: exp PLUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 81
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 46

   30 opexp: exp MINUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 82
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 47

   31 opexp: exp TIMES . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 83
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 48

   32 opexp: exp DIVIDE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 84
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 49

   33 opexp: exp EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 85
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 50

   34 opexp: exp NEQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 86
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 51

   35 opexp: exp LT . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 87
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 52

   36 opexp: exp LE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 88
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 53

   37 opexp: exp GT . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 89
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 54

   38 opexp: exp GE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 90
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 55

   39 opexp: exp AND . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 91
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 56

   40 opexp: exp OR . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 92
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 57

   25 lvalue: lvalue LBRACK . exp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 93
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 58

   24 lvalue: lvalue DOT . ID

    ID  shift, and go to state 94


state 59

   48 assignexp: lvalue ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 95
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 60

   27 callexp: ID LPAREN RPAREN .

    $default  reduce using rule 27 (callexp)


state 61

   21 explist: exp . COMMA explist
   22        | exp .
   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp

    COMMA   shift, and go to state 96
    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48
    EQ      shift, and go to state 49
    NEQ     shift, and go to state 50
    LT      shift, and go to state 51
    LE      shift, and go to state 52
    GT      shift, and go to state 53
    GE      shift, and go to state 54
    AND     shift, and go to state 55
    OR      shift, and go to state 56

    $default  reduce using rule 22 (explist)


state 62

   28 callexp: ID LPAREN explist . RPAREN

    RPAREN  shift, and go to state 97


state 63

   26 lvalue: ID LBRACK exp . RBRACK
   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp
   47 arrayexp: ID LBRACK exp . RBRACK OF exp

    RBRACK  shift, and go to state 98
    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48
    EQ      shift, and go to state 49
    NEQ     shift, and go to state 50
    LT      shift, and go to state 51
    LE      shift, and go to state 52
    GT      shift, and go to state 53
    GE      shift, and go to state 54
    AND     shift, and go to state 55
    OR      shift, and go to state 56


state 64

   46 rec_one: ID . EQ exp

    EQ  shift, and go to state 99


state 65

   43 recordexp: ID LBRACE RBRACE .

    $default  reduce using rule 43 (recordexp)


state 66

   42 recordexp: ID LBRACE rec . RBRACE

    RBRACE  shift, and go to state 100


state 67

   44 rec: rec_one . COMMA rec
   45    | rec_one .

    COMMA  shift, and go to state 101

    $default  reduce using rule 45 (rec)


state 68

   19 expseq: exp SEMICOLON . expseq

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 102
    expseq     go to state 103
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 69

    2 exp: LPAREN exp RPAREN .

    $default  reduce using rule 2 (exp)


state 70

    3 exp: LPAREN expseq RPAREN .

    $default  reduce using rule 3 (exp)


state 71

   49 ifexp: IF exp THEN . exp ELSE exp
   50      | IF exp THEN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 104
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 72

   51 whileexp: WHILE exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 105
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 73

   52 forexp: FOR ID ASSIGN . exp TO exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 106
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 74

   63 fundec: FUNCTION ID . LPAREN tyfields RPAREN EQ exp
   64       | FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp

    LPAREN  shift, and go to state 107


state 75

   59 vardec: VAR ID . ASSIGN exp
   60       | VAR ID . COLON ID ASSIGN exp

    COLON   shift, and go to state 108
    ASSIGN  shift, and go to state 109


state 76

   67 tydec: TYPE ID . EQ ty

    EQ  shift, and go to state 110


state 77

   53 letexp: LET decs IN . expseq END

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 102
    expseq     go to state 111
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 78

   54 decs: dec decs .

    $default  reduce using rule 54 (decs)


state 79

   61 fundecs: fundec fundecs .

    $default  reduce using rule 61 (fundecs)


state 80

   65 tydecs: tydec tydecs .

    $default  reduce using rule 65 (tydecs)


state 81

   29 opexp: exp . PLUS exp
   29      | exp PLUS exp .
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp

    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48

    $default  reduce using rule 29 (opexp)


state 82

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   30      | exp MINUS exp .
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp

    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48

    $default  reduce using rule 30 (opexp)


state 83

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   31      | exp TIMES exp .
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp

    $default  reduce using rule 31 (opexp)


state 84

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   32      | exp DIVIDE exp .
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp

    $default  reduce using rule 32 (opexp)


state 85

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   33      | exp EQ exp .
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 33 (opexp)


state 86

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   34      | exp NEQ exp .
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 34 (opexp)


state 87

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   35      | exp LT exp .
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 35 (opexp)


state 88

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   36      | exp LE exp .
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 36 (opexp)


state 89

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   37      | exp GT exp .
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 37 (opexp)


state 90

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   38      | exp GE exp .
   39      | exp . AND exp
   40      | exp . OR exp

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 38 (opexp)


state 91

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   39      | exp AND exp .
   40      | exp . OR exp

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48
    EQ      shift, and go to state 49
    NEQ     shift, and go to state 50
    LT      shift, and go to state 51
    LE      shift, and go to state 52
    GT      shift, and go to state 53
    GE      shift, and go to state 54

    $default  reduce using rule 39 (opexp)


state 92

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp
   40      | exp OR exp .

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48
    EQ      shift, and go to state 49
    NEQ     shift, and go to state 50
    LT      shift, and go to state 51
    LE      shift, and go to state 52
    GT      shift, and go to state 53
    GE      shift, and go to state 54
    AND     shift, and go to state 55

    $default  reduce using rule 40 (opexp)


state 93

   25 lvalue: lvalue LBRACK exp . RBRACK
   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp

    RBRACK  shift, and go to state 112
    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48
    EQ      shift, and go to state 49
    NEQ     shift, and go to state 50
    LT      shift, and go to state 51
    LE      shift, and go to state 52
    GT      shift, and go to state 53
    GE      shift, and go to state 54
    AND     shift, and go to state 55
    OR      shift, and go to state 56


state 94

   24 lvalue: lvalue DOT ID .

    $default  reduce using rule 24 (lvalue)


state 95

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp
   48 assignexp: lvalue ASSIGN exp .

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48
    EQ      shift, and go to state 49
    NEQ     shift, and go to state 50
    LT      shift, and go to state 51
    LE      shift, and go to state 52
    GT      shift, and go to state 53
    GE      shift, and go to state 54
    AND     shift, and go to state 55
    OR      shift, and go to state 56

    $default  reduce using rule 48 (assignexp)


state 96

   21 explist: exp COMMA . explist

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 61
    explist    go to state 113
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 97

   28 callexp: ID LPAREN explist RPAREN .

    $default  reduce using rule 28 (callexp)


state 98

   26 lvalue: ID LBRACK exp RBRACK .
   47 arrayexp: ID LBRACK exp RBRACK . OF exp

    OF  shift, and go to state 114

    $default  reduce using rule 26 (lvalue)


state 99

   46 rec_one: ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 115
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 100

   42 recordexp: ID LBRACE rec RBRACE .

    $default  reduce using rule 42 (recordexp)


state 101

   44 rec: rec_one COMMA . rec

    ID  shift, and go to state 64

    rec      go to state 116
    rec_one  go to state 67


state 102

   19 expseq: exp . SEMICOLON expseq
   20       | exp .
   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp

    SEMICOLON  shift, and go to state 68
    PLUS       shift, and go to state 45
    MINUS      shift, and go to state 46
    TIMES      shift, and go to state 47
    DIVIDE     shift, and go to state 48
    EQ         shift, and go to state 49
    NEQ        shift, and go to state 50
    LT         shift, and go to state 51
    LE         shift, and go to state 52
    GT         shift, and go to state 53
    GE         shift, and go to state 54
    AND        shift, and go to state 55
    OR         shift, and go to state 56

    $default  reduce using rule 20 (expseq)


state 103

   19 expseq: exp SEMICOLON expseq .

    $default  reduce using rule 19 (expseq)


state 104

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp
   49 ifexp: IF exp THEN exp . ELSE exp
   50      | IF exp THEN exp .

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48
    EQ      shift, and go to state 49
    NEQ     shift, and go to state 50
    LT      shift, and go to state 51
    LE      shift, and go to state 52
    GT      shift, and go to state 53
    GE      shift, and go to state 54
    AND     shift, and go to state 55
    OR      shift, and go to state 56
    ELSE    shift, and go to state 117

    PLUS      [reduce using rule 50 (ifexp)]
    MINUS     [reduce using rule 50 (ifexp)]
    TIMES     [reduce using rule 50 (ifexp)]
    DIVIDE    [reduce using rule 50 (ifexp)]
    EQ        [reduce using rule 50 (ifexp)]
    NEQ       [reduce using rule 50 (ifexp)]
    LT        [reduce using rule 50 (ifexp)]
    LE        [reduce using rule 50 (ifexp)]
    GT        [reduce using rule 50 (ifexp)]
    GE        [reduce using rule 50 (ifexp)]
    AND       [reduce using rule 50 (ifexp)]
    OR        [reduce using rule 50 (ifexp)]
    ELSE      [reduce using rule 50 (ifexp)]
    $default  reduce using rule 50 (ifexp)


state 105

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp
   51 whileexp: WHILE exp DO exp .

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48
    EQ      shift, and go to state 49
    NEQ     shift, and go to state 50
    LT      shift, and go to state 51
    LE      shift, and go to state 52
    GT      shift, and go to state 53
    GE      shift, and go to state 54
    AND     shift, and go to state 55
    OR      shift, and go to state 56

    PLUS      [reduce using rule 51 (whileexp)]
    MINUS     [reduce using rule 51 (whileexp)]
    TIMES     [reduce using rule 51 (whileexp)]
    DIVIDE    [reduce using rule 51 (whileexp)]
    EQ        [reduce using rule 51 (whileexp)]
    NEQ       [reduce using rule 51 (whileexp)]
    LT        [reduce using rule 51 (whileexp)]
    LE        [reduce using rule 51 (whileexp)]
    GT        [reduce using rule 51 (whileexp)]
    GE        [reduce using rule 51 (whileexp)]
    AND       [reduce using rule 51 (whileexp)]
    OR        [reduce using rule 51 (whileexp)]
    $default  reduce using rule 51 (whileexp)


state 106

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp
   52 forexp: FOR ID ASSIGN exp . TO exp DO exp

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48
    EQ      shift, and go to state 49
    NEQ     shift, and go to state 50
    LT      shift, and go to state 51
    LE      shift, and go to state 52
    GT      shift, and go to state 53
    GE      shift, and go to state 54
    AND     shift, and go to state 55
    OR      shift, and go to state 56
    TO      shift, and go to state 118


state 107

   63 fundec: FUNCTION ID LPAREN . tyfields RPAREN EQ exp
   64       | FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 119

    $default  reduce using rule 71 (tyfields)

    tyfields           go to state 120
    tyfields_nonempty  go to state 121
    field              go to state 122


state 108

   60 vardec: VAR ID COLON . ID ASSIGN exp

    ID  shift, and go to state 123


state 109

   59 vardec: VAR ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 124
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 110

   67 tydec: TYPE ID EQ . ty

    ID      shift, and go to state 125
    LBRACE  shift, and go to state 126
    ARRAY   shift, and go to state 127

    ty  go to state 128


state 111

   53 letexp: LET decs IN expseq . END

    END  shift, and go to state 129


state 112

   25 lvalue: lvalue LBRACK exp RBRACK .

    $default  reduce using rule 25 (lvalue)


state 113

   21 explist: exp COMMA explist .

    $default  reduce using rule 21 (explist)


state 114

   47 arrayexp: ID LBRACK exp RBRACK OF . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 130
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 115

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp
   46 rec_one: ID EQ exp .

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48
    EQ      shift, and go to state 49
    NEQ     shift, and go to state 50
    LT      shift, and go to state 51
    LE      shift, and go to state 52
    GT      shift, and go to state 53
    GE      shift, and go to state 54
    AND     shift, and go to state 55
    OR      shift, and go to state 56

    $default  reduce using rule 46 (rec_one)


state 116

   44 rec: rec_one COMMA rec .

    $default  reduce using rule 44 (rec)


state 117

   49 ifexp: IF exp THEN exp ELSE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 131
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 118

   52 forexp: FOR ID ASSIGN exp TO . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 132
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 119

   75 field: ID . COLON ID

    COLON  shift, and go to state 133


state 120

   63 fundec: FUNCTION ID LPAREN tyfields . RPAREN EQ exp
   64       | FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp

    RPAREN  shift, and go to state 134


state 121

   72 tyfields: tyfields_nonempty .

    $default  reduce using rule 72 (tyfields)


state 122

   73 tyfields_nonempty: field . COMMA tyfields_nonempty
   74                  | field .

    COMMA  shift, and go to state 135

    $default  reduce using rule 74 (tyfields_nonempty)


state 123

   60 vardec: VAR ID COLON ID . ASSIGN exp

    ASSIGN  shift, and go to state 136


state 124

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp
   59 vardec: VAR ID ASSIGN exp .

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48
    EQ      shift, and go to state 49
    NEQ     shift, and go to state 50
    LT      shift, and go to state 51
    LE      shift, and go to state 52
    GT      shift, and go to state 53
    GE      shift, and go to state 54
    AND     shift, and go to state 55
    OR      shift, and go to state 56

    $default  reduce using rule 59 (vardec)


state 125

   68 ty: ID .

    $default  reduce using rule 68 (ty)


state 126

   69 ty: LBRACE . tyfields RBRACE

    ID  shift, and go to state 119

    $default  reduce using rule 71 (tyfields)

    tyfields           go to state 137
    tyfields_nonempty  go to state 121
    field              go to state 122


state 127

   70 ty: ARRAY . OF ID

    OF  shift, and go to state 138


state 128

   67 tydec: TYPE ID EQ ty .

    $default  reduce using rule 67 (tydec)


state 129

   53 letexp: LET decs IN expseq END .

    $default  reduce using rule 53 (letexp)


state 130

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp
   47 arrayexp: ID LBRACK exp RBRACK OF exp .

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48
    EQ      shift, and go to state 49
    NEQ     shift, and go to state 50
    LT      shift, and go to state 51
    LE      shift, and go to state 52
    GT      shift, and go to state 53
    GE      shift, and go to state 54
    AND     shift, and go to state 55
    OR      shift, and go to state 56

    PLUS      [reduce using rule 47 (arrayexp)]
    MINUS     [reduce using rule 47 (arrayexp)]
    TIMES     [reduce using rule 47 (arrayexp)]
    DIVIDE    [reduce using rule 47 (arrayexp)]
    EQ        [reduce using rule 47 (arrayexp)]
    NEQ       [reduce using rule 47 (arrayexp)]
    LT        [reduce using rule 47 (arrayexp)]
    LE        [reduce using rule 47 (arrayexp)]
    GT        [reduce using rule 47 (arrayexp)]
    GE        [reduce using rule 47 (arrayexp)]
    AND       [reduce using rule 47 (arrayexp)]
    OR        [reduce using rule 47 (arrayexp)]
    $default  reduce using rule 47 (arrayexp)


state 131

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp
   49 ifexp: IF exp THEN exp ELSE exp .

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48
    EQ      shift, and go to state 49
    NEQ     shift, and go to state 50
    LT      shift, and go to state 51
    LE      shift, and go to state 52
    GT      shift, and go to state 53
    GE      shift, and go to state 54
    AND     shift, and go to state 55
    OR      shift, and go to state 56

    PLUS      [reduce using rule 49 (ifexp)]
    MINUS     [reduce using rule 49 (ifexp)]
    TIMES     [reduce using rule 49 (ifexp)]
    DIVIDE    [reduce using rule 49 (ifexp)]
    EQ        [reduce using rule 49 (ifexp)]
    NEQ       [reduce using rule 49 (ifexp)]
    LT        [reduce using rule 49 (ifexp)]
    LE        [reduce using rule 49 (ifexp)]
    GT        [reduce using rule 49 (ifexp)]
    GE        [reduce using rule 49 (ifexp)]
    AND       [reduce using rule 49 (ifexp)]
    OR        [reduce using rule 49 (ifexp)]
    $default  reduce using rule 49 (ifexp)


state 132

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp
   52 forexp: FOR ID ASSIGN exp TO exp . DO exp

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48
    EQ      shift, and go to state 49
    NEQ     shift, and go to state 50
    LT      shift, and go to state 51
    LE      shift, and go to state 52
    GT      shift, and go to state 53
    GE      shift, and go to state 54
    AND     shift, and go to state 55
    OR      shift, and go to state 56
    DO      shift, and go to state 139


state 133

   75 field: ID COLON . ID

    ID  shift, and go to state 140


state 134

   63 fundec: FUNCTION ID LPAREN tyfields RPAREN . EQ exp
   64       | FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp

    COLON  shift, and go to state 141
    EQ     shift, and go to state 142


state 135

   73 tyfields_nonempty: field COMMA . tyfields_nonempty

    ID  shift, and go to state 119

    tyfields_nonempty  go to state 143
    field              go to state 122


state 136

   60 vardec: VAR ID COLON ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 144
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 137

   69 ty: LBRACE tyfields . RBRACE

    RBRACE  shift, and go to state 145


state 138

   70 ty: ARRAY OF . ID

    ID  shift, and go to state 146


state 139

   52 forexp: FOR ID ASSIGN exp TO exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 147
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 140

   75 field: ID COLON ID .

    $default  reduce using rule 75 (field)


state 141

   64 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp

    ID  shift, and go to state 148


state 142

   63 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 149
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 143

   73 tyfields_nonempty: field COMMA tyfields_nonempty .

    $default  reduce using rule 73 (tyfields_nonempty)


state 144

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp
   60 vardec: VAR ID COLON ID ASSIGN exp .

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48
    EQ      shift, and go to state 49
    NEQ     shift, and go to state 50
    LT      shift, and go to state 51
    LE      shift, and go to state 52
    GT      shift, and go to state 53
    GE      shift, and go to state 54
    AND     shift, and go to state 55
    OR      shift, and go to state 56

    $default  reduce using rule 60 (vardec)


state 145

   69 ty: LBRACE tyfields RBRACE .

    $default  reduce using rule 69 (ty)


state 146

   70 ty: ARRAY OF ID .

    $default  reduce using rule 70 (ty)


state 147

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp
   52 forexp: FOR ID ASSIGN exp TO exp DO exp .

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48
    EQ      shift, and go to state 49
    NEQ     shift, and go to state 50
    LT      shift, and go to state 51
    LE      shift, and go to state 52
    GT      shift, and go to state 53
    GE      shift, and go to state 54
    AND     shift, and go to state 55
    OR      shift, and go to state 56

    PLUS      [reduce using rule 52 (forexp)]
    MINUS     [reduce using rule 52 (forexp)]
    TIMES     [reduce using rule 52 (forexp)]
    DIVIDE    [reduce using rule 52 (forexp)]
    EQ        [reduce using rule 52 (forexp)]
    NEQ       [reduce using rule 52 (forexp)]
    LT        [reduce using rule 52 (forexp)]
    LE        [reduce using rule 52 (forexp)]
    GT        [reduce using rule 52 (forexp)]
    GE        [reduce using rule 52 (forexp)]
    AND       [reduce using rule 52 (forexp)]
    OR        [reduce using rule 52 (forexp)]
    $default  reduce using rule 52 (forexp)


state 148

   64 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp

    EQ  shift, and go to state 150


state 149

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp
   63 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp .

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48
    EQ      shift, and go to state 49
    NEQ     shift, and go to state 50
    LT      shift, and go to state 51
    LE      shift, and go to state 52
    GT      shift, and go to state 53
    GE      shift, and go to state 54
    AND     shift, and go to state 55
    OR      shift, and go to state 56

    $default  reduce using rule 63 (fundec)


state 150

   64 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 151
    lvalue     go to state 14
    callexp    go to state 15
    opexp      go to state 16
    recordexp  go to state 17
    arrayexp   go to state 18
    assignexp  go to state 19
    ifexp      go to state 20
    whileexp   go to state 21
    forexp     go to state 22
    letexp     go to state 23


state 151

   29 opexp: exp . PLUS exp
   30      | exp . MINUS exp
   31      | exp . TIMES exp
   32      | exp . DIVIDE exp
   33      | exp . EQ exp
   34      | exp . NEQ exp
   35      | exp . LT exp
   36      | exp . LE exp
   37      | exp . GT exp
   38      | exp . GE exp
   39      | exp . AND exp
   40      | exp . OR exp
   64 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48
    EQ      shift, and go to state 49
    NEQ     shift, and go to state 50
    LT      shift, and go to state 51
    LE      shift, and go to state 52
    GT      shift, and go to state 53
    GE      shift, and go to state 54
    AND     shift, and go to state 55
    OR      shift, and go to state 56

    $default  reduce using rule 64 (fundec)
